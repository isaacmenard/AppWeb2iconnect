-- phpMyAdmin SQL Dump
-- version 4.8.5
-- https://www.phpmyadmin.net/
--
-- Hôte : 127.0.0.1:3306
-- Généré le :  mar. 24 mars 2020 à 12:16
-- Version du serveur :  5.7.26
-- Version de PHP :  7.2.18

SET SQL_MODE = "NO_AUTO_VALUE_ON_ZERO";
SET AUTOCOMMIT = 0;
START TRANSACTION;
SET time_zone = "+00:00";


/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8mb4 */;

--
-- Base de données :  `2iconnect`
--

-- --------------------------------------------------------

--
-- Structure de la table `blablacar`
--

DROP TABLE IF EXISTS `blablacar`;
CREATE TABLE IF NOT EXISTS `blablacar` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `user` int(11) NOT NULL,
  `pointA` text NOT NULL,
  `pointB` text NOT NULL,
  `date` datetime NOT NULL,
  `temps` text NOT NULL,
  `numero` text NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=MyISAM DEFAULT CHARSET=latin1;

-- --------------------------------------------------------

--
-- Structure de la table `comment`
--

DROP TABLE IF EXISTS `comment`;
CREATE TABLE IF NOT EXISTS `comment` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `user` int(11) NOT NULL,
  `comment` text NOT NULL,
  `date` datetime NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=MyISAM AUTO_INCREMENT=18 DEFAULT CHARSET=latin1;

--
-- Déchargement des données de la table `comment`
--

INSERT INTO `comment` (`id`, `user`, `comment`, `date`) VALUES
(1, 1, 'hey !', '2020-03-17 12:17:01'),
(2, 1, 'ez', '2020-03-17 14:46:32'),
(3, 1, 'qsd', '2020-03-17 14:47:21'),
(4, 2, 'zerz', '2020-03-17 14:57:29'),
(5, 2, 'sqd', '2020-03-17 15:32:19'),
(6, 1, 'ze', '2020-03-17 15:36:42'),
(7, 1, 'apres  sfnqnezisbfizqebifizebf fedzqsfbelzqnf zedsf s;f qzjs flkezqn iu feisbfi zqeiofezifu ezbsdlcnq isfuic u vbdsun fisfuvbcelsk bfkuyes iflvbekudvfbil snyfug es vkjesr bilsf nlzieg fovbslcbeo fiesb fu yebsilfg bvues bfilerbuyfbnsuilr hguesb ileus', '2020-03-17 19:59:44'),
(8, 1, 'dsq', '2020-03-17 21:17:11'),
(9, 1, 'dsq', '2020-03-17 21:17:58'),
(10, 1, 'sdfqfdqsbfi ZEHIHFIOZEHIFH IZEHFICHS', '2020-03-17 21:18:06'),
(11, 1, '\"\'``csdxvlkq ', '2020-03-17 21:21:49'),
(12, 1, 'sdDSQdsSD sq dGBZ OUYDUYKS', '2020-03-17 21:47:38'),
(13, 1, 'sdDSQdsSD sq dGBZ OUYDUYKS', '2020-03-17 21:47:52'),
(14, 1, 'ddddddddddddd dddddddddddddddddd dddddddddddddddddd ddddddddddddddddd ddddddddddddddddddd dddddddddddddddddd', '2020-03-17 21:48:05'),
(15, 1, 'ssssssssssssssssss sssssssssssssssssssss ssssssssssssssssssssss sssssssssssssssssssssss sssssssssssssssssssssssssssss sssssssssssssssssss sssssssssssssssssss', '2020-03-17 21:48:20'),
(16, 1, '\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\" \'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\' \"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\" \'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\' \"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\" ', '2020-03-17 21:48:41');
INSERT INTO `comment` (`id`, `user`, `comment`, `date`) VALUES
(17, 1, ' Python (langage) Sauter Ã  la navigationSauter Ã  la recherche Page dâ€™aide sur lâ€™homonymie	Pour les articles homonymes, voir Python. Python Logo. Date de premiÃ¨re version	20 fÃ©vrier 19911 Paradigmes	Objet, impÃ©ratif et interprÃ©tÃ© Auteur	Guido van Rossum DÃ©veloppeurs	Python Software Foundation DerniÃ¨re version	3.8.2 (24 fÃ©vrier 2020)2 3.7.7 (10 mars 2020)3 Version en dÃ©veloppement	3.9.0a4 (25 fÃ©vrier 2020)4 Typage	Fort, dynamique, duck typing InfluencÃ© par	ABC, C, Eiffel, ICON, Modula-3, Java, Perl, Smalltalk, Tcl A influencÃ©	Ruby, Groovy, Boo, Julia ImplÃ©mentations	CPython, Jython, IronPython, PyPy Ã‰crit en	C pour CPython, Java pour Jython, C# pour IronPython et en Python lui-mÃªme pour PyPy SystÃ¨me d\'exploitation	Multiplateforme Licence	Licence libre : Python Software Foundation License Site web	www.python.org Extension de fichier	py, pyc, pyd, pyo, pyw et pyz modifier Consultez la documentation du modÃ¨le Python (/ËˆpaÉª.Î¸É‘n/5) est un langage de programmation interprÃ©tÃ©, multi-paradigme et multiplateformes. Il favorise la programmation impÃ©rative structurÃ©e, fonctionnelle et orientÃ©e objet. Il est dotÃ© d\'un typage dynamique fort, d\'une gestion automatique de la mÃ©moire par ramasse-miettes et d\'un systÃ¨me de gestion d\'exceptions ; il est ainsi similaire Ã  Perl, Ruby, Scheme, Smalltalk et Tcl.  Le langage Python est placÃ© sous une licence libre proche de la licence BSD6 et fonctionne sur la plupart des plates-formes informatiques, des smartphones aux ordinateurs centraux7, de Windows Ã  Unix avec notamment GNU/Linux en passant par macOS, ou encore Android, iOS, et peut aussi Ãªtre traduit en Java ou .NET. Il est conÃ§u pour optimiser la productivitÃ© des programmeurs en offrant des outils de haut niveau et une syntaxe simple Ã  utiliser.  Il est Ã©galement apprÃ©ciÃ© par certains pÃ©dagogues qui y trouvent un langage oÃ¹ la syntaxe, clairement sÃ©parÃ©e des mÃ©canismes de bas niveau, permet une initiation aisÃ©e aux concepts de base de la programmation8.   Sommaire 1	Utilisation 2	Historique 2.1	Au CWI 2.2	Au CNRI 2.3	Ã€ BeOpen 2.4	La Python Software Foundation 3	CaractÃ©ristiques 3.1	Syntaxe 3.1.1	Mots-clÃ©s du langage 3.1.2	Types de base 3.1.3	Programmation fonctionnelle 3.1.4	Programmation objet 3.1.5	MÃ©thodes spÃ©ciales et dÃ©finition des opÃ©rateurs 3.1.6	GÃ©nÃ©rateurs 3.2	RÃ©flexivitÃ© 3.3	Typage 3.3.1	Annotations 3.3.2	Compilation 3.4	ModÃ¨le objet 3.4.1	MÃ©thodes 3.4.2	VisibilitÃ© 3.4.3	HÃ©ritage 4	BibliothÃ¨que standard 5	Conventions de style 6	Interfaces graphiques 7	La communautÃ© Python 7.1	Adoption de Python 8	ImplÃ©mentations du langage 9	Distributions de Python 10	Historique des versions 11	DÃ©veloppement 11.1	Les PEP 11.2	Python 3 11.2.1	Philosophie 11.2.2	Planning et compatibilitÃ© 11.3	Python pour smartphones 12	Notes et rÃ©fÃ©rences 13	Voir aussi 13.1	Liste de frameworks principaux 13.2	Articles connexes Utilisation Python est un langage qui peut s\'utiliser dans de nombreux contextes et s\'adapter Ã  tout type d\'utilisation grÃ¢ce Ã  des bibliothÃ¨ques spÃ©cialisÃ©es. Il est cependant particuliÃ¨rement utilisÃ© comme langage de script pour automatiser des tÃ¢ches simples mais fastidieuses, comme un script qui rÃ©cupÃ©rerait la mÃ©tÃ©o sur Internet ou qui s\'intÃ©grerait dans un logiciel de conception assistÃ©e par ordinateur afin d\'automatiser certains enchaÃ®nements d\'actions rÃ©pÃ©titives (voir la section Adoption). On l\'utilise Ã©galement comme langage de dÃ©veloppement de prototype lorsqu\'on a besoin d\'une application fonctionnelle avant de l\'optimiser avec un langage de plus bas niveau. Il est particuliÃ¨rement rÃ©pandu dans le monde scientifique, et possÃ¨de de nombreuses bibliothÃ¨ques optimisÃ©es destinÃ©es au calcul numÃ©rique.  Historique Au CWI  Guido van Rossum, crÃ©ateur de Python, Ã  la OSCON 2006. Ã€ la fin des annÃ©es 1980, le programmeur Guido van Rossum, participe au dÃ©veloppement du langage de programmation ABC au Centrum voor Wiskunde en Informatica (CWI) d\'Amsterdam, aux Pays-Bas. Il travaillait alors dans lâ€™Ã©quipe du systÃ¨me dâ€™exploitation Amoeba dont les appels systÃ¨mes Ã©taient difficilement interfaÃ§ables avec le Bourne shell utilisÃ© comme interface utilisateur. Il estime alors quâ€™un langage de script inspirÃ© dâ€™ABC pourrait Ãªtre intÃ©ressant comme interprÃ©teur de commandes pour Amoeba9.  En 1989, profitant dâ€™une semaine de vacances durant les fÃªtes de NoÃ«l, il utilise son ordinateur personnel10 pour Ã©crire la premiÃ¨re version du langage. Fan de la sÃ©rie tÃ©lÃ©visÃ©e Monty Python\'s Flying Circus, il dÃ©cide de baptiser ce projet Python11. Il sâ€™est principalement inspirÃ© dâ€™ABC, par exemple pour lâ€™indentation comme syntaxe ou les types de haut niveau mais aussi de Modula-3 pour la gestion des exceptions, du langage C et des outils UNIX12.  Durant lâ€™annÃ©e suivante, le langage commence Ã  Ãªtre adoptÃ© par lâ€™Ã©quipe du projet Amoeba, Guido poursuivant son dÃ©veloppement principalement pendant son temps libre. En fÃ©vrier 1991, la premiÃ¨re version publique, numÃ©rotÃ©e 0.9.013, est postÃ©e sur le forum Usenet alt.sources. La derniÃ¨re version sortie au CWI fut Python 1.2.  Au CNRI En 1995, Van Rossum continua son travail sur Python au CNRI (en) Ã  Reston, aux Ã‰tats-Unis, oÃ¹ il sortit plusieurs versions du logiciel.  Ã€ partir d\'aoÃ»t 1995, l\'Ã©quipe Python travaille au CNRI sur Grail14 un navigateur web utilisant Tk. Il est l\'Ã©quivalent pour Python du navigateur HotJava, permettant d\'exÃ©cuter des applets dans un environnement sÃ©curisÃ©. La premiÃ¨re version publique, disponible en novembre, est la 0.215. Il a entraÃ®nÃ© le dÃ©veloppement de modules pour la bibliothÃ¨que standard comme rexec16, htmllib ou urllib17. La version 0.6 sera la derniÃ¨re de Grail ; elle est publiÃ©e en avril 199918.  En 1999, le projet Computer Programming for Everybody (CP4E) est lancÃ© avec collaboration entre le CNRI et la DARPA. Il s\'agit d\'utiliser Python comme langage d\'enseignement de la programmation. Cette initiative conduira Ã  la crÃ©ation de l\'environnement de dÃ©veloppement IDLE. Cependant, du fait du manque de financement du projet par la DARPA, et du dÃ©part de nombreux dÃ©veloppeurs Python du CNRI (dont Guido van Rossum), le projet sâ€™Ã©teint en 200019. Python 1.6 fut la derniÃ¨re version sortie au CNRI.  Ã€ BeOpen En 2000, l\'Ã©quipe principale de dÃ©veloppement de Python dÃ©mÃ©nagea Ã  BeOpen.com pour former l\'Ã©quipe PythonLabs de BeOpen. Python 2.0 fut la seule version sortie Ã  BeOpen.com. AprÃ¨s cette version, Guido Van Rossum et les autres dÃ©veloppeurs de PythonLabs rejoignirent Digital Creations (Ã  prÃ©sent connue sous le nom de Zope Corporation)20.  Andrew M. Kuchling a publiÃ© en dÃ©cembre 199921 un texte nommÃ© Python Warts22 qui synthÃ©tise les griefs les plus frÃ©quents exprimÃ©s Ã  l\'encontre du langage. Ce document aura une influence certaine sur les dÃ©veloppements futurs du langage23.  La Python Software Foundation Python 2.1 fut une version dÃ©rivÃ©e de Python 1.6.1, ainsi que de Python 2.0. Sa licence fut renommÃ©e Python Software Foundation License. Tout code, documentation et spÃ©cification ajoutÃ©, depuis la sortie de Python 2.1 alpha, est dÃ©tenu par la Python Software Foundation (PSF), une association sans but lucratif fondÃ©e en 2001, modelÃ©e d\'aprÃ¨s l\'Apache Software Foundation.  Afin de rÃ©parer certains dÃ©fauts du langage (par exemple l\'orientÃ© objet avec deux types de classes), et pour nettoyer la bibliothÃ¨que standard de ses Ã©lÃ©ments obsolÃ¨tes et redondants, Python a choisi de casser la compatibilitÃ© ascendante dans la nouvelle version majeure, Python 3.0, publiÃ© en dÃ©cembre 2008. Cette version a Ã©tÃ© suivie rapidement par une version 3.1 qui corrige les erreurs de jeunesse de la version 3.0.  CaractÃ©ristiques Syntaxe Python a Ã©tÃ© conÃ§u pour Ãªtre un langage lisible. Il vise Ã  Ãªtre visuellement Ã©purÃ©. Par exemple, il possÃ¨de moins de constructions syntaxiques que de nombreux langages structurÃ©s tels que C, Perl, ou Pascal. Les commentaires sont indiquÃ©s par le caractÃ¨re croisillon (#).  Les blocs sont identifiÃ©s par l\'indentation, au lieu d\'accolades comme en C ou C++ ; ou de begin ... end comme en Pascal ou Ruby. Une augmentation de l\'indentation marque le dÃ©but d\'un bloc, et une rÃ©duction de l\'indentation marque la fin du bloc courant. Par convention (actuellement PEP8), l\'indentation est habituellement de quatre espaces en Python24.  Fonction factorielle en C	Fonction factorielle en Python int factorielle(int n) {     if (n < 2)     {         return 1;     }     else     {         return n * factorielle(n - 1);     } } def factorielle(n):     if n < 2:         return 1     else:         return n * factorielle(n - 1) NB : l\'indentation pourrait Ãªtre modifiÃ©e ou supprimÃ©e dans la version en C sans modifier son comportement. De mÃªme la fonction Python peut Ãªtre Ã©crite avec une expression conditionnelle25. Cependant, une indentation correcte permet de dÃ©tecter plus aisÃ©ment des erreurs en cas d\'imbrication de plusieurs blocs et facilite donc l\'Ã©limination de ces erreurs. C\'est pourquoi il est prÃ©fÃ©rable d\'indenter convenablement les programmes en C. La version courte s\'Ã©crirait ainsi :  Fonction factorielle en C	Fonction factorielle en Python int factorielle(int n) {     return n < 2 ? 1 : n * factorielle(n - 1); } def factorielle(n):     return n * factorielle(n - 1) if n > 1 else 1 Mots-clÃ©s du langage Les mots-clÃ©s sont fournis dans la liste keyword.kwlist du module keyword26. Les mots-clÃ©s de Python 2.7.5 sont les suivants : and, as, assert, break, class, continue, def, del, elif, else, except, exec, finally, for, from, global, if, import, in, is, lambda, not, or, pass, print, raise, return, try, while, with, yield.  Ã€ partir de Python 3.0, print et exec ne sont plus des mots-clÃ©s du langage, mais des fonctions du module builtins27. Sont ajoutÃ©s aux mots-clÃ©s : True, False, None et nonlocal. Les trois premiers Ã©taient dÃ©jÃ  prÃ©sents dans les versions prÃ©cÃ©dentes, mais ils ne sont plus modifiables (auparavant, l\'affectation True = 1 Ã©tait possible)28. nonlocal a Ã©tÃ© introduit par le PEP 310429, et permet, dans une fonction dÃ©finie Ã  l\'intÃ©rieur d\'une autre fonction, de modifier une variable d\'un niveau supÃ©rieur de portÃ©e. Avant cela, seules les variables locales Ã  la fonction, et globales (niveau module) Ã©taient modifiables. Toutefois, il Ã©tait possible, et Ã§a l\'est toujours sans le mot-clÃ© nonlocal, de modifier un objet affectÃ© Ã  une variable d\'un niveau de portÃ©e supÃ©rieur, par exemple une liste avec la mÃ©thode append - c\'est Ã©videmment impossible pour un objet immuable.  Types de base Les types de base en Python sont relativement complets et puissants. Il y a, entre autres :  Les objets numÃ©riques int est un entier. Avant la version 3.0, ce type Ã©tait dÃ©nommÃ© long, et le type int correspondait Ã  un entier de 32 ou 64 bits. NÃ©anmoins, une conversion automatique Ã©vitait tout dÃ©bordement. Maintenant, ce type correspond Ã  un entier codÃ© sur 32 bits ou moins. long est un entier illimitÃ© de plus de 32 bits en Python 3. float est un flottant Ã©quivalent au type double du C, soit un nombre entre âˆ’1,7Ã—10308 et 1,7Ã—10308 sur les plateformes en conformitÃ© avec l\'IEEE 754. complex est une approximation d\'un nombre complexe (typiquement deux float). Les objets Â« itÃ©rables Â» Les objets tuple (n-uplet) sont des listes immuables d\'objets hÃ©tÃ©rogÃ¨nes. Les objets list sont des tableaux dynamiques (ils Ã©tendent automatiquement leur taille lorsque nÃ©cessaire) et acceptent des types de donnÃ©es hÃ©tÃ©rogÃ¨nes. Les objets set sont des ensembles non ordonnÃ©s d\'objets. Les objets frozenset forment une variante immuable des set. Les objets dict sont des tableaux associatifs (ou dictionnaires) permettant d\'associer un objet (une clef) Ã  un autre. Les objets str sont des chaÃ®nes de caractÃ¨res. Ã€ partir de la version 3.0, les caractÃ¨res sont en Unicode sur 16 ou 32 bits ; les chaines d\'octets sont des objets bytes30. Dans les versions prÃ©cÃ©dentes, ces objets Ã©taient respectivement de type unicode et str. Les objets str et bytes sont immuables. Les objets bytearray sont des chaÃ®nes d\'octets modifiables. La version d\'Unicode employÃ©e par Python peut Ãªtre dÃ©terminÃ©e Ã  l\'aide de la variable unidata_version du module unicodedata. Les objets file correspond Ã  un fichier obtenu grÃ¢ce Ã  la mÃ©thode open() Il existe aussi d\'autres types d\'objets itÃ©rables, notamment xrange obtenu via la mÃ©thode range(), et les types liÃ©s aux mÃ©thodes de dictionnaires .keys(), .values() et .items(). La plupart d\'entre eux sont immuables. Les autres objets, n\'Ã©tant ni numÃ©riques ni itÃ©rables None est simplement le type d\'un \"vide\". Il sert Ã  dÃ©noter qu\'une variable est vide. type est le type du type des objets, obtenu grÃ¢ce Ã  la mÃ©thode type(). object est le type basique dont tous les autres types \"hÃ©ritent\" slice est une partie de type ou un objet extensible NotImplementedType est, comme son nom l\'indique, une absence d\'implÃ©mentation du type auquel on essaie d\'accÃ©der. bool est un boolÃ©en, soit le type de True et False renvoyÃ©s par exemple lors de comparaisons or de l\'utilisation de mÃ©thodes is_x(). exception est le type d\'un message d\'erreur lancÃ© lorsque le code lÃ¨ve une exception. function est le type d\'une fonction, utilisÃ© lors de l\'appel des mots-clef def et lambda. module est le type d\'un module, utilisÃ© lors de l\'appel des mots-clef import et from. Les objets itÃ©rables sont parcourus Ã  l\'aide d\'une boucle for de la maniÃ¨re suivante :  for element in objet_iterable:     traiter(element) Pour une chaÃ®ne de caractÃ¨res, l\'itÃ©ration procÃ¨de caractÃ¨re par caractÃ¨re.  Il est possible de dÃ©river les classes des types de base pour crÃ©er ses propres types. On peut Ã©galement fabriquer ses propres types d\'objets itÃ©rables sans hÃ©riter des itÃ©rables de base en utilisant le protocole d\'itÃ©ration du langage.  Programmation fonctionnelle Python permet de programmer dans un style fonctionnel. Il dispose Ã©galement des comprÃ©hensions de listes, et plus gÃ©nÃ©ralement les comprÃ©hensions peuvent produire des gÃ©nÃ©rateurs, des dictionnaires ou des ensembles31. Par exemple, pour construire la liste des carrÃ©s des entiers naturels plus petits que 10, on peut utiliser l\'expression :  liste = [x**2 for x in range(10)] # liste = [0, 1, 4, 9, 16, 25, 36, 49, 64, 81] La liste des nombres pairs :  liste = [entier for entier in range(10) if entier % 2 == 0] # liste = [0, 2, 4, 6, 8] Une table de passage des lettres de l\'alphabet vers leur code ASCII :  {chr(n): n for n in range(65, 91)} L\'ensemble des lettres d\'un mot (produit l\'ensemble {\'r\', \'c\', \'d\', \'b\', \'a\'}) :  s = \"abracadabra\" {c for c in s} Une comprÃ©hension peut comprendre plusieurs boucles et filtres, et il existe une correspondance avec le code rÃ©alisant le mÃªme calcul Ã  l\'aide d\'instructions for et if :  ComprÃ©hension	Code Ã©quivalent [ i + j if i != j else 0     for i in range(n)         if i % 2 != 0             for j in range(n)                 if j % 3 != 0 ] a = [] for i in range(n):     if i % 2 != 0:         for j in range(n):             if j % 3 != 0:                 a.append(i + j if i != j else 0) Une forme limitÃ©e de fonction anonyme est possible :  lambda x: x + 2 Les fonctions lambda peuvent Ãªtre dÃ©finies en ligne et utilisÃ©es comme arguments dans des expressions fonctionnelles :   filter(lambda x: x < 5, une_liste) retournera une liste constituÃ©e des Ã©lÃ©ments de une_liste infÃ©rieurs Ã  5. Le mÃªme rÃ©sultat peut Ãªtre obtenu avec   [x for x in une_liste if x < 5] Les lambdas de Python n\'admettent que des expressions et ne peuvent Ãªtre utilisÃ©es comme fonctions anonymes gÃ©nÃ©ralisÃ©es ; mais en Python, toutes les fonctions sont des objets, elles peuvent donc Ãªtre passÃ©es en arguments Ã  d\'autres fonctions, et appelÃ©es lorsque c\'est nÃ©cessaire. En effet, une fonction dÃ©finie avec def peut Ãªtre crÃ©Ã©e Ã  l\'intÃ©rieur d\'une autre fonction et on obtient ainsi une dÃ©finition de fonction dans une variable locale, par exemple :  def filtre_inferieur_a_5(une_liste):     def mon_filtre(x): # variable locale mon_filtre         return x < 5     return filter(mon_filtre, une_liste) Une fonction locale peut modifier l\'environnement de la fonction qui l\'a crÃ©Ã©e, grÃ¢ce au mot-clÃ© nonlocal (voir Fermeture (informatique)) :  def accum(pas):     total = 0     def ajoute(n):         nonlocal total         total += n * pas         return total     return ajoute On peut ainsi crÃ©er plusieurs accumulateurs, faisant chacun rÃ©fÃ©rence Ã  son propre total. Il est possible d\'accÃ©der Ã  l\'environnement d\'une fonction locale Ã  l\'aide de l\'attribut __closure__.  Programmation objet Tous les types de base, les fonctions, les instances de classes (les objets Â« classiques Â» des langages C++ et Java) et les classes elles-mÃªmes (qui sont des instances de mÃ©ta-classes) sont des objets.  Une classe se dÃ©finit avec le mot-clÃ© class. Les classes Python supportent l\'hÃ©ritage multiple ; il n\'y a pas de surcharge statique comme en C++, ou de restrictions sur l\'hÃ©ritage comme c\'est le cas en Java (une classe implÃ©mente plusieurs interfaces et hÃ©rite d\'une seule classe) mais le mÃ©canisme des arguments optionnels et par mot-clÃ© est plus gÃ©nÃ©ral et plus flexible. En Python, l\'attribut d\'un objet peut rÃ©fÃ©rencer une variable d\'instance ou de classe (le plus souvent une mÃ©thode). Il est possible de lire ou de modifier un attribut dynamiquement avec les fonctions :  getattr(objet, \"nom_attribut\") setattr(objet, \"nom_attribut\", nouvel_attribut) Exemple de deux classes simples :  class Personne:     def __init__(self, nom, prenom):         self.nom = nom         self.prenom = prenom     def presenter(self):         return self.nom + \" \" + self.prenom  class Etudiant(Personne):     def __init__(self, niveau, nom, prenom):         Personne.__init__(self, nom, prenom)         self.niveau = niveau     def presenter(self):         return self.niveau + \" \" + Personne.presenter(self)  e = Etudiant(\"Licence INFO\", \"Dupontel\", \"Albert\") assert e.nom == \"Dupontel\" MÃ©thodes spÃ©ciales et dÃ©finition des opÃ©rateurs Python fournit un mÃ©canisme Ã©lÃ©gant et orientÃ© objet pour dÃ©finir un ensemble prÃ©-dÃ©fini d\'opÃ©rateurs : tout objet Python peut se voir dotÃ© de mÃ©thodes dites spÃ©ciales.  Ces mÃ©thodes, commenÃ§ant et finissant par deux tirets de soulignement (underscores), sont appelÃ©es lors de l\'utilisation d\'un opÃ©rateur sur l\'objet : + (mÃ©thode __add__), += (mÃ©thode __iadd__), [] (mÃ©thode __getitem__), () (mÃ©thode __call__), etc. Des mÃ©thodes comme __repr__ et __str__ permettent de dÃ©finir la reprÃ©sentation d\'un objet dans l\'interprÃ©teur interactif et son rendu avec la fonction print.  Les possibilitÃ©s sont nombreuses et sont dÃ©crites dans la documentation du langage32.  Par exemple on peut dÃ©finir l\'addition de deux vecteurs Ã  deux dimensions avec la classe suivante :  class Vector2D:     def __init__(self, x, y):         # On utilise un tuple pour stocker les coordonnÃ©es         self.coords = (x, y)      def __add__(self, other):         # L\'instruction a+b sera rÃ©solue comme a.__add__(b)         # On construit un objet Vector2D Ã  partir des coordonnÃ©es propres Ã  l\'objet, et Ã  l\'autre opÃ©rande         return Vector2D(self.coords[0]+other.coords[0], self.coords[1]+other.coords[1])      def __repr__(self):         # L\'affichage de l\'objet dans l\'interprÃ©teur         return \"Vector2D(%s, %s)\" %self.coords  a = Vector2D(1, 2) b = Vector2D(3, 4) print(a + b) # Vector2D(4, 6) GÃ©nÃ©rateurs Le mot-clef yield utilisÃ© dans une fonction permet de faire de cette fonction un gÃ©nÃ©rateur. L\'appel de cette fonction renvoie un objet de type generator, qui peut Ãªtre utilisÃ© dans une boucle for, par exemple.  Ã€ chaque appel, le gÃ©nÃ©rateur effectue son traitement jusqu\'Ã  rencontrer le mot-clÃ© yield, renvoie la valeur de l\'expression yield, et Ã  l\'appel suivant, reprend son dÃ©roulement juste aprÃ¨s le yield. Par exemple pour calculer la suite de Fibonacci, on peut Ã©crire :  def gen_fibonacci():     \"\"\"GÃ©nÃ©rateur de la suite de Fibonacci\"\"\"     a, b = 0, 1     while True:         yield a  # Renvoie la valeur de \"a\", rÃ©sultat de l\'itÃ©ration en cours         a, b = b, a + b  fi = gen_fibonacci() for i in range(20):     print(next(fi)) Le module itertools permet de manipuler les gÃ©nÃ©rateurs. Par exemple, pour extraire les 10 premiers Ã©lÃ©ments du gÃ©nÃ©rateur prÃ©cÃ©dent :  import itertools list(itertools.islice(gen_fibonacci(), 10)) # renvoie [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] Depuis Python 3.3, il est possible de produire un gÃ©nÃ©rateur Ã  partir d\'une fonction rÃ©cursive, grÃ¢ce Ã  la syntaxe yield from, apparue dans le PEP 38033 et qui Â« dÃ©lÃ¨gue Â» le calcul Ã  un sous-gÃ©nÃ©rateur. L\'exemple suivant calcule les permutations des dames correspondant aux solutions du problÃ¨me des huit dames Ã©tendu Ã  un Ã©chiquier de taille n Ã— n.  def queens(n):     a = list(range(n))     up = [True] * (2 * n - 1)     down = [True] * (2 * n - 1)     def sub(i):         for k in range(i, n):             j = a[k]             p = i + j             q = i - j + n - 1             if up[p] and down[q]:                 if i == n - 1:                     yield tuple(a)                 else:                     up[p] = down[q] = False                     a[i], a[k] = a[k], a[i]                     yield from sub(i + 1)                     up[p] = down[q] = True                     a[i], a[k] = a[k], a[i]     yield from sub(0)  sum(1 for a in queens(8)) # Nombre de solutions, renvoie 92 Un gÃ©nÃ©rateur peut sembler identique Ã  une fonction qui retourne une liste, mais contrairement Ã  une liste qui contient tous ses Ã©lÃ©ments, un gÃ©nÃ©rateur calcule ses Ã©lÃ©ments un par un. Ainsi, le test 36 in [n * n for n in range(10)] va s\'effectuer sur la liste calculÃ©e en entier, alors que dans 36 in (n * n for n in range(10)), qui utilise un gÃ©nÃ©rateur, le calcul des carrÃ©s s\'arrÃªte dÃ¨s que 36 est trouvÃ©. On peut s\'en convaincre en remplaÃ§ant n * n par un appel de fonction rÃ©alisant un effet de bord, par exemple un affichage Ã  l\'Ã©cran.  RÃ©flexivitÃ© GrÃ¢ce Ã  un usage intensif des dictionnaires (conteneur associatif dÃ©veloppÃ© avec des tables de hachage), Python permet d\'explorer les divers objets du langage (introspection) et dans certains cas de les modifier (intercession).  Typage Python 3. The standard type hierarchy.png Le typage n\'est pas vÃ©rifiÃ© Ã  la compilation. Python utilise le duck typing : lors de lâ€™exÃ©cution, si une mÃ©thode invoquÃ©e sur un objet a la mÃªme signature qu\'une mÃ©thode dÃ©clarÃ©e sur cet objet, alors c\'est cette derniÃ¨re mÃ©thode qui est exÃ©cutÃ©e. De ce fait, invoquer une mÃ©thode qui n\'existe pas sur un objet va Ã©chouer, signifiant que l\'objet en question n\'est pas du bon type. MalgrÃ© l\'absence de typage statique, Python est fortement typÃ©, interdisant des opÃ©rations ayant peu de sens (par exemple, additionner un nombre Ã  une chaÃ®ne de caractÃ¨res) au lieu de tenter silencieusement de la convertir en une forme qui a du sens. Python propose des fonctions permettant de transformer les variables dans un autre type :  points = 3.2 # points est du type float print(\"Tu as \" + points + \" points !\") # GÃ©nÃ¨re une erreur de typage  points = int(points) # points est maintenant du type int (entier), sa valeur est arrondie Ã  l\'unitÃ© infÃ©rieure (ici 3) print(\"Tu as \" + points + \" points !\") # GÃ©nÃ¨re une erreur de typage  points = str(points) # points est maintenant du type str (chaÃ®ne de caractÃ¨res) print(\"Tu as \" + points + \" points !\") # Plus d\'erreur de typage, affiche \'Tu as 3 points !\' Python propose aussi un mÃ©canisme de typage statique pour les attributs des classes grÃ¢ce Ã  l\'API trait34 ou au patron de conception decorators.  Annotations Depuis la version 3.0, Python propose l\'annotation des variables dans les fonctions (introduit dans la PEP 310735). Ce qui permet de rendre le code plus lisible sans pour autant faire office de solution de typage statique puisque rien n\'oblige Ã  suivre ces annotations36.  def hello(name: str) -> str:     return \"Hello {} !\".format(name)  hello(\"Alice\") # Appel suggÃ©rÃ© par les annotations hello(True) # Appel non conforme mais tout Ã  fait fonctionnel En complÃ©ment, depuis la version 3.5, Python propose le module typing37 (introduit dans la PEP 48438).  from typing import List  def split_string(string: str) -> List[str]:     return string.split(\" \") Compilation Il est possible d\'effectuer une analyse statique des modules Python avec des outils comme Pylint 39, mypy 40, ou PyChecker. Sans nÃ©cessiter une exÃ©cution, ces outils repÃ¨rent des fautes ou des constructions dÃ©conseillÃ©es. Par exemple, une classe qui hÃ©rite d\'une classe abstraite et qui ne redÃ©finit pas les mÃ©thodes abstraites, ou bien des variables utilisÃ©es avant d\'Ãªtre dÃ©clarÃ©es, ou encore des attributs d\'instance dÃ©clarÃ©s en dehors de la mÃ©thode __init__.  Il est aussi possible de gÃ©nÃ©rer un code intermÃ©diaire (bytecode) Python.  Des outils comme PyInstaller41 ou d\'autres plus spÃ©cifiques comme cx_Freeze sous Unix, Windows et macOS, py2app42 sous macOS et py2exe sous Windows permettent de Â« compiler Â» un programme Python sous forme d\'un exÃ©cutable comprenant le programme et un interprÃ©teur Python.  Le programme ne tourne pas plus rapidement (il n\'est pas compilÃ© sous forme de code machine) mais cela simplifie largement sa distribution, notamment sur des machines oÃ¹ l\'interprÃ©teur Python n\'est pas installÃ©.  ModÃ¨le objet En Python, tout est objet, dans le sens qu\'une variable peut contenir une rÃ©fÃ©rence vers tous les Ã©lÃ©ments manipulÃ©s par le langage : nombres, mÃ©thodes, modules, etc.43. NÃ©anmoins, avant la version 2.2, les classes et les instances de classes Ã©taient un type d\'objet particulier, ce qui signifiait qu\'il Ã©tait par exemple impossible de dÃ©river sa propre sous-classe de l\'objet list.  MÃ©thodes Le modÃ¨le objet de Python est inspirÃ© de celui de Modula-344. Parmi ces emprunts se trouve l\'obligation de dÃ©clarer l\'instance de l\'objet courant, conventionnellement nommÃ©e self, comme premier argument des mÃ©thodes, et Ã  chaque fois que l\'on souhaite accÃ©der Ã  une donnÃ©e de cette instance dans le corps de cette mÃ©thode. Cette pratique n\'est pas naturelle pour des programmeurs venant par exemple de C++ ou Java, la profusion des self Ã©tant souvent critiquÃ©e comme Ã©tant une pollution visuelle qui gÃªne la lecture du code. Les promoteurs du self explicite estiment au contraire qu\'il Ã©vite le recours Ã  des conventions de nommage pour les donnÃ©es membres et qu\'il simplifie des tÃ¢ches comme l\'appel Ã  une mÃ©thode de la superclasse ou la rÃ©solution d\'homonymie entre donnÃ©es membres45.  Python reconnaÃ®t trois types de mÃ©thodes :  les mÃ©thodes d\'instance, qui sont celles dÃ©finies par dÃ©faut. Elles reÃ§oivent comme premier argument une instance de la classe oÃ¹ elles ont Ã©tÃ© dÃ©finies. les mÃ©thodes de classe, qui reÃ§oivent comme premier argument la classe oÃ¹ elles ont Ã©tÃ© dÃ©finies. Elles peuvent Ãªtre appelÃ©es depuis une instance ou directement depuis la classe. Elles permettent de dÃ©finir des constructeurs alternatifs comme la mÃ©thode fromkeys() de l\'objet dict. Elles sont dÃ©clarÃ©es avec le dÃ©corateur @classmethod. les mÃ©thodes statiques, qui ne reÃ§oivent pas de premier argument implicite. Elles sont similaires aux mÃ©thodes statiques que l\'on trouve en Java ou C++. Elles sont dÃ©clarÃ©es avec le dÃ©corateur @staticmethod. VisibilitÃ© Le langage a un support trÃ¨s limitÃ© de l\'encapsulation. Il n\'y a pas, comme en Java par exemple, de contrÃ´le de l\'accessibilitÃ© par des mots clefs comme protected ou private.  La philosophie de Python est de diffÃ©rencier conceptuellement l\'encapsulation du masquage d\'information. Le masquage d\'information vise Ã  prÃ©venir les utilisations frauduleuses, c\'est une prÃ©occupation de sÃ©curitÃ© informatique. Le module bastion de la bibliothÃ¨que standard, qui n\'est plus maintenu dans les derniÃ¨res versions du langage, permettait ainsi de contrÃ´ler l\'accÃ¨s aux attributs d\'un objet dans le cadre d\'un environnement d\'exÃ©cution restreint.  L\'encapsulation est une problÃ©matique de dÃ©veloppement logiciel. Le slogan des dÃ©veloppeurs Python est we\'re all consenting adults here46 (nous sommes entre adultes consentants). Ils estiment en effet qu\'il suffit d\'indiquer, par des conventions d\'Ã©criture, les parties publiques des interfaces et que c\'est aux utilisateurs des objets de se conformer Ã  ces conventions ou de prendre leurs responsabilitÃ©s. L\'usage est de prÃ©fixer par un underscore les membres privÃ©s. Le langage permet par ailleurs d\'utiliser un double underscore pour Ã©viter les collisions de noms, en prÃ©fixant automatiquement le nom de la donnÃ©e par celui de la classe oÃ¹ elle est dÃ©finie.  L\'utilisation de la fonction property() permet de dÃ©finir des propriÃ©tÃ©s qui ont pour but d\'intercepter, Ã  l\'aide de mÃ©thodes, les accÃ¨s Ã  une donnÃ©e membre. Cela rend inutile la dÃ©finition systÃ©matique d\'accesseurs et le masquage des donnÃ©es comme il est courant de le faire en C++ par exemple.  HÃ©ritage Python supporte l\'hÃ©ritage multiple. Depuis la version 2.3, il utilise l\'algorithme C3 (en), issu du langage Dylan47, pour rÃ©soudre l\'ordre de rÃ©solution de mÃ©thode (MRO). Les versions prÃ©cÃ©dentes utilisaient un algorithme de parcours en profondeur qui posait des problÃ¨mes dans le cas d\'un hÃ©ritage en diamant48.  BibliothÃ¨que standard  Python est fourni Â« piles incluses Â». Python possÃ¨de une grande bibliothÃ¨que standard, fournissant des outils convenant Ã  de nombreuses tÃ¢ches diverses. Le nombre de modules de la bibliothÃ¨que standard peut Ãªtre augmentÃ© avec des modules spÃ©cifiques Ã©crits en C ou en Python.  La bibliothÃ¨que standard est particuliÃ¨rement bien conÃ§ue pour Ã©crire des applications utilisant Internet, avec un grand nombre de formats et de protocoles standards gÃ©rÃ©s (tels que MIME et HTTP). Des modules pour crÃ©er des interfaces graphiques et manipuler des expressions rationnelles sont Ã©galement fournis. Python inclut Ã©galement un framework de tests unitaires (unittest, anciennement PyUnit avant version 2.1) pour crÃ©er des suites de tests exhaustives.  Conventions de style Bien que chaque programmeur puisse adopter ses propres conventions pour l\'Ã©criture de code Python, Guido van Rossum a mis un guide Ã  disposition, rÃ©fÃ©rencÃ© comme Â« PEP 8 Â»24. PubliÃ© en 2001, il est toujours maintenu pour l\'adapter aux Ã©volutions du langage. Google propose Ã©galement un guide49.  Interfaces graphiques Python possÃ¨de plusieurs modules disponibles pour la crÃ©ation de logiciels avec une interface graphique. Le plus rÃ©pandu est Tkinter. Ce module convient Ã  beaucoup d\'applications et peut Ãªtre considÃ©rÃ© comme suffisant dans la plupart des cas. NÃ©anmoins, d\'autres modules ont Ã©tÃ© crÃ©Ã©s pour pouvoir lier Python Ã  d\'autres bibliothÃ¨ques logicielles (Â« toolkit Â»), pour davantage de fonctionnalitÃ©s, pour une meilleure intÃ©gration avec le systÃ¨me d\'exploitation utilisÃ©, ou simplement pour pouvoir utiliser Python avec sa bibliothÃ¨que prÃ©fÃ©rÃ©e. En effet, certains programmeurs trouvent l\'utilisation de Tkinter plus pÃ©nible que d\'autres bibliothÃ¨ques. Ces autres modules ne font pas partie de la bibliothÃ¨que standard et doivent donc Ãªtre obtenus sÃ©parÃ©ment.  Les principaux modules donnant accÃ¨s aux bibliothÃ¨ques d\'interface graphique sont Tkinter et Pmw (Python megawidgets)50 pour Tk, wxPython pour wxWidgets, PyGTK pour GTK+, PyQt et PySide pour Qt, et enfin FxPy pour le FOX Toolkit. Il existe aussi une adaptation de la bibliothÃ¨que SDL : Pygame, un binding de la SFML : PySFML, ainsi qu\'une bibliothÃ¨que Ã©crite spÃ©cialement pour Python : Pyglet (en).  Il est aussi possible de crÃ©er des applications Silverlight en Python sur la plateforme IronPython.  La communautÃ© Python Guido van Rossum est le principal auteur de Python, et son rÃ´le de dÃ©cideur central permanent de Python est reconnu avec humour par le titre de Â« Dictateur bienveillant Ã  vie Â» (Benevolent Dictator for Life, BDFL).  Il est assistÃ© d\'une Ã©quipe de core developers qui ont un accÃ¨s en Ã©criture au dÃ©pÃ´t de CPython et qui se coordonnent sur la liste de diffusion python-dev. Ils travaillent principalement sur le langage et la bibliothÃ¨que de base. Ils reÃ§oivent ponctuellement les contributions d\'autres dÃ©veloppeurs Python via la plateforme de gestion de bug Roundup, qui a remplacÃ© SourceForge.  Les utilisateurs ou dÃ©veloppeurs de bibliothÃ¨ques tierces utilisent diverses autres ressources. Le principal mÃ©dia gÃ©nÃ©raliste autour de Python est le forum Usenet anglophone comp.lang.python.  Les allusions aux Monty Python sont assez frÃ©quentes. Les didacticiels consacrÃ©s Ã  Python utilisent souvent les mots spam et eggs comme variable mÃ©tasyntaxique. Il s\'agit d\'une rÃ©fÃ©rence au sketch Spam des Monty Python, oÃ¹ deux clients tentent de commander un repas Ã  l\'aide d\'une carte qui contient du jambon en conserve de marque SPAM dans pratiquement tous les plats. Ce sketch a Ã©tÃ© aussi pris pour rÃ©fÃ©rence pour dÃ©signer un courriel non sollicitÃ©.  Adoption de Python Article dÃ©taillÃ© : Liste de logiciels Python. Plusieurs entreprises ou organismes mentionnent sur leur site officiel51 qu\'ils utilisent Python :  Google (Guido van Rossum a travaillÃ© au sein de cette entreprise entre 2005 et 201252) ; Industrial Light & Magic ; la NASA ; et CCP Games, les crÃ©ateurs du jeu vidÃ©o EVE Online. Python est aussi le langage de commande d\'un grand nombre de logiciels libres :  FreeCAD, logiciel de CAO 3D Blender, logiciel de modÃ©lisation 3D et d\'Ã©dition vidÃ©o Inkscape, logiciel de dessin vectoriel LibreOffice et Apache OpenOffice, les deux branches de dÃ©veloppement d\'une suite bureautique issue de StarOffice Portage, le gestionnaire de paquets du systÃ¨me d\'exploitation Gentoo ParaView, logiciel de visualisation de donnÃ©es numÃ©riques Kodi, un lecteur multimÃ©dia QGIS, un logiciel de cartographie Weblate, un outil de traduction gedit, un Ã©diteur de texte (les plugins sont Ã©crits en Python) SageMath, un logiciel de calcul formel Et commerciaux :  Wing IDE, environnement de dÃ©veloppement intÃ©grÃ© spÃ©cialisÃ© sur Python, et Ã©crit en Python Corel Paint Shop Pro, logiciel de traitement dâ€™image et d\'Ã©dition graphique capella, logiciel de notation musicale ArcGIS, un logiciel de cartographie53 Python est utilisÃ© comme langage de programmation dans l\'enseignement Ã©lÃ©mentaire et supÃ©rieur, notamment en France54. Depuis 2013, il y est enseignÃ©, en mÃªme temps que Scilab, Ã  tous les Ã©tudiants de classes prÃ©paratoires scientifiques dans le cadre du tronc commun (informatique pour tous). Auparavant, l\'enseignement d\'informatique Ã©tait limitÃ© Ã  une option en MP, l\'enseignement se faisant en langage Caml ou Pascal. Cette option existe toujours, mais Pascal a Ã©tÃ© abandonnÃ© Ã  partir de la session 2015 des concours, ne reste donc que Caml dans cet enseignement. Les premiÃ¨res Ã©preuves de concours portant sur le langage Python sont Ã©galement celles de la session 201555,56.  ImplÃ©mentations du langage Outre la version de rÃ©fÃ©rence, nommÃ©e CPython (car Ã©crite en langage C), il existe d\'autres systÃ¨mes mettant en Å“uvre le langage Python57 :  Stackless Python, une version de CPython n\'utilisant pas la pile d\'appel du langage C ; Jython, un interprÃ¨te Python pour machine virtuelle Java. Il a accÃ¨s aux bibliothÃ¨ques fournies avec l\'environnement de dÃ©veloppement Java ; IronPython, un interprÃ¨te / compilateur (expÃ©rimental) pour plateforme .Net / Mono ; Brython, une implÃ©mentation de Python 3 pour les navigateurs web ; MicroPython, variante lÃ©gÃ¨re pour microcontrÃ´leurs ; PyPy un interprÃ¨te Python Ã©crit dans un sous-ensemble de Python compilable vers le C ou LLVM ; un compilateur (expÃ©rimental) pour Parrot, la machine virtuelle de Perl 6 ; Shed Skin58, un compilateur d\'un sous-ensemble de Python produisant du code en C++ ; Unladen Swallow (en)59, une version de CPython optimisÃ©e et basÃ©e sur LLVM, maintenant abandonnÃ©e (la derniÃ¨re version remonte Ã  octobre 2009) ; RustPython, projet dâ€™implÃ©mentation en Rust60. Ces autres versions ne bÃ©nÃ©ficient pas forcÃ©ment de la totalitÃ© de la bibliothÃ¨que de fonctions Ã©crites en C pour la version de rÃ©fÃ©rence, ni des derniÃ¨res Ã©volutions du langage.  Distributions de Python DiffÃ©rentes distributions sont disponibles, qui incluent parfois beaucoup de paquets dÃ©diÃ©s Ã  un domaine donnÃ©61 :  ActivePython62 : disponible en version gratuite (ne pouvant Ãªtre Â« utilisÃ©e en production Â») ou commerciale. Python(x,y)63 : distribution Python Ã  l\'usage des scientifiques basÃ©e sur Qt et Eclipse. ObsolÃ¨te, remplacÃ© par WinPython Enthought Canopy64 : distribution Ã  usage scientifique, disponible en version gratuite (Canopy Express) ou commerciale. Anaconda65 : distribution Ã  usage scientifique, disponible en version gratuite ou commerciale. Intel Distribution for Python66 : distribution basÃ©e sur Anaconda, intÃ©grant notamment la bibliothÃ¨que MKL (en) d\'Intel afin d\'accÃ©lÃ©rer les calculs numÃ©riques de bibliothÃ¨ques telles que NumPy et SciPy, intÃ©grÃ©es Ã  la distribution. Elle est disponible gratuitement seule, ou bien intÃ©grÃ©e Ã  Intel Parallel Studio, qui nÃ©cessite une licence payante. Pyzo67 : Â« Python to the people Â», destinÃ©e Ã  Ãªtre facile d\'utilisation. WinPython68: distribution Ã  usage scientifique avec Spyder, QT, etc.... Ce ne sont pas des implÃ©mentations diffÃ©rentes du langage Python : elles sont basÃ©es sur CPython, mais sont livrÃ©es avec un certain nombre de bibliothÃ¨ques prÃ©installÃ©es.  Historique des versions Version	Date de sortie	NouveautÃ©s69 1.5(.2)	13 avril 1999	 Ajout du mot clÃ© assert PossibilitÃ© d\'importer une hiÃ©rarchie de modules (import spam.ham.eggs) Nouveau module re qui remplace regex Les exceptions sont maintenant des classes Ajout de l\'option -O qui supprime les assertions et informations de ligne de fichier 1.6	5 septembre 2000	 La mÃ©thode append() des listes n\'accepte plus qu\'un seul argument Le rÃ©sultat des fonctions str() et repr() est maintenant beaucoup plus souvent diffÃ©rent, exemple : str(1L)==\'1\' et repr(1L)==\'1L\' Les chaÃ®nes de caractÃ¨res ont maintenant des mÃ©thodes (\" abc \".strip()) Le module re est compatible avec l\'ancien moteur, est plus rapide, et accepte les chaÃ®nes Unicode Ajout du module distutils Nouveau prototype def f(*args, **kw) pour les fonctions, avant il fallait utiliser apply() int() et long() acceptent maintenant une base en second argument L\'opÃ©rateur in peut Ãªtre surchagÃ© avec une mÃ©thode __contains__() 2.0	16 octobre 2000	 Changement majeur : support d\'Unicode Ajout des comprÃ©hensions de liste (List Comprehensions) Ajout des opÃ©rateurs avec assignement (a+=b, a*=b, etc.) Les chaÃ®nes str ont maintenant des mÃ©thodes Nouveau ramasse-miettes Ã  cycles Ajout des modules distutils, xml.dom.minidom et xml.sax 2.1	17 avril 2001	 CrÃ©ation du module __future__ pour rendre les transitions plus douces Comparaisons riches (mÃ©thodes __lt__, __le__...) Framework d\'avertissement Ajout des modules inspect, pydoc, doctest, pyunit Ajout des rÃ©fÃ©rences faibles (weak references) Les fonctions peuvent avoir des attributs Nested Scopes La version 2.0.1 (juin 2001) sera la premiÃ¨re version compatible GPL 2.2	21 dÃ©cembre 2001	 Unification de Type et de Class : on peut maintenant hÃ©riter des types de base Ajout des itÃ©rateurs et gÃ©nÃ©rateurs Nouvel opÃ©rateur a // b pour la division entiÃ¨re 2.3	29 juillet 2003	 Ajout des fonctions enumerate() et sum() Le type bool est maintenant vraiment distinct d\'un entier Beaucoup d\'amÃ©liorations du support Unicode 2.4	30 novembre 2004	 Ajout des dÃ©corateurs de fonction/mÃ©thode (@decorateur) Conversion automatique d\'un entier court en entier long si le rÃ©sultat d\'une opÃ©ration est trop grand Expressions de gÃ©nÃ©rateur retournant les rÃ©sultats l\'un aprÃ¨s l\'autre et non pas sous forme d\'une liste, exemple : sum( x for x in xrange(10000) ) Ajout des fonctions reversed() et sorted() La fonction de tri sort() accepte les mots clÃ©s cmp, key et reverse CrÃ©ation du module decimal et du routeur 2.5	19 septembre 2006	 Ajout de l\'instruction with Ajout des mÃ©thodes send(), throw() et close() aux gÃ©nÃ©rateurs Expression conditionnelle (a if test else b) Les imports de module peuvent Ãªtre relatifs Ajout des mÃ©thodes partition() et rpartition() aux chaÃ®nes str et unicode Ajout des fonctions any() et all() IntÃ©gration des bibliothÃ¨ques ctypes, ElementTree, hashlib, sqlite3 et wsgiref 2.6	1er octobre 2008	 Nouvelle syntaxe de formatage de chaÃ®nes de caractÃ¨res Classes de bases abstraites DÃ©corateurs de classes Modules JSON, multiprocessing, contextmanager et fractions AmÃ©lioration de la compatibilitÃ© avec Python 3 2.7	3 juillet 2010	 Syntaxe pour les ensembles littÃ©raux : {1, 2, 3} au lieu de set((1, 2, 3)) ComprÃ©hension de dictionnaire et d\'ensemble, exemples : {i: i*2 for i in range(3)} (dictionnaire) et {i*2 for i in range(3)} (ensemble) PossibilitÃ© de spÃ©cifier plusieurs gestionnaires de contexte avec une seule dÃ©claration with RÃ©implementation de la bibliothÃ¨que io (entrÃ©es/sorties) en C pour offrir de meilleures performances. Cette bibliothÃ¨que est notamment utile pour accÃ©der Ã  un fichier texte en Unicode. Dictionnaires ordonnÃ©s comme dÃ©crits dans la PEP 372 : from collections import OrderedDict La mÃ©thode format gÃ¨re la numÃ©rotation automatique : \'{} {}!\'.format(\'Hello\', \'World\') donne \'Hello World\'! Le formatage des nombres gÃ¨re les sÃ©parateurs de milliers, exemple : \'{:,}\'.format(10800) donne \'10,800\' AmÃ©lioration de prÃ©cision lors des conversions chaÃ®ne vers flottant et flottant vers chaÃ®ne. Pour un flottant, float(repr(x)) donnera toujours x. Nouveau module argparse pour parser la ligne de commande : version amÃ©liorÃ©e du module optparse Configuration basÃ©e sur des dictionnaires pour le module logging Objets memoryview : vue en lecture seule ou lecture-Ã©criture d\'un objet binaire (API similaire Ã  celle du type bytes) Type PyCapsule pour l\'API C (pour les modules d\'extension) Les types int et long gagnent une mÃ©thode bit_length() : nombre de bits nÃ©cessaires pour reprÃ©senter la valeur absolue du nombre 3.0	3 dÃ©cembre 200870	 Fusion des types \'int\' et \'long\' Les chaÃ®nes sont en Unicode par dÃ©faut, \'bytes\' remplace l\'ancien type \'str\' Utilise des itÃ©rateurs plutÃ´t que des listes lÃ  oÃ¹ c\'est appropriÃ© (ex : dict.keys()) a/b est la vraie division par dÃ©faut exec et print deviennent des fonctions None, True et False deviennent des mots clÃ© Le fichier __init__.py n\'est plus nÃ©cessaire pour les modules Python `x` et l\'opÃ©rateur  disparaissent De nombreuses fonctions disparaissent : apply(), buffer(), callable()... reduce() disparaÃ®t au profit des boucles explicites Voir la PEP 3100 pour les dÃ©tails  3.1	27 juin 200971	 Ajout d\'un type de dictionnaire ordonnÃ©, Optimisations diverses apportÃ©es au type \'int\', Nouvelles fonctionnalitÃ©s du module \'unittest\', Module d\'entrÃ©es/sorties \'io\' rendu plus rapide, IntÃ©gration de l\'instruction Â« import Â» en pur Python Nouvelle syntaxe pour les instructions \'with\' imbriquÃ©es. 3.2	20 fÃ©vrier 201172	 Ajout du module argparse pour le parsing des arguments passÃ©s Ã  un programme Modification de la gestion des fichiers compilÃ©s .pyc Ajout des certificats (protocole HTTPS) AmÃ©lioration du module pickle RÃ©introduction de la fonction callable() (retirÃ©e en 3.0) 3.3	29 septembre 201273	 Ajout de la syntaxe yield fromâ€‹ pour utiliser des sous-gÃ©nÃ©rateurs73 La syntaxe u\'unicode\' est de nouveau acceptÃ©e74 Ajout du module faulthandler pour aider Ã  dÃ©bugger les problÃ¨mes de bas niveau Support pour la compression LZMA Ajout d\'un module pour les Mock dans unittest Incorporation des fonctionnalitÃ©s du module virtualenv avec le module venv Refonte de la hiÃ©rarchie des erreurs systÃ¨me (I/O). 3.4	16 mars 201475	 ajout du module asyncio pour la programmation asynchrone76 3.5	13 septembre 201577	 nouvel opÃ©rateur pour les matrices : a @ bâ€‹78 ajout de la syntaxe awaitâ€‹ 3.6	23 dÃ©cembre 201679	 PossibilitÃ© d\'Ã©crire les grands nombres sous la forme : 1_000_000â€‹80. Ajout du module secretsâ€‹ pour simplifier la gÃ©nÃ©ration de nombres pseudo-alÃ©atoires de qualitÃ© cryptographique81. Nouveau formattage des chaines de caractÃ¨res (les f-strings)82 : >>> var = 50 >>> print(f\'On affiche {var}\') On affiche 50 3.7	31 janvier 201883	 Nouveaux modules. Nouveau mode de dÃ©veloppement (X)83. Support des variables de contexte via le nouveau module contextvars84. async et await font maintenant partie officiellement des mots-clefs rÃ©servÃ©s, mÃªme s\'ils Ã©taient dÃ©jÃ  considÃ©rÃ©s comme tel par nombre de lexers et faisaient partie du langage depuis Python 3.585. ajout d\'une nouvelle fonction intÃ©grÃ©e : breakpoint() permettant une meilleure insertion de points d\'arrÃªt86. le module time a maintenant un support pour les nanosecondes grÃ¢ce Ã  la mÃ©thode time.time_ns() ainsi que d\'autres mÃ©thodes notamment de l\'objet clock87. 3.8	14 octobre 2019	 Cette section est vide, insuffisamment dÃ©taillÃ©e ou incomplÃ¨te. Votre aide est la bienvenue ! Comment faire ? DÃ©veloppement Les PEP Les propositions d\'amÃ©lioration de Python (ou PEP : Python Enhancement Proposal) sont des documents textuels qui ont pour objet d\'Ãªtre la voie d\'amÃ©lioration de Python et de prÃ©cÃ©der toutes ses modifications88. Un PEP est une proposition d\'orientation pour le dÃ©veloppement (process PEP), une proposition technique (Standard Track PEP) ou une simple recommandation (Informational PEP).  Python 3 En 2019, c\'est la version 3 de Python, qui remplace de plus en plus la version 2 (le projet Ã©tait au dÃ©part appelÃ© Â« Python 3000 Â» ou Â« Py3K Â»), sans compatibilitÃ© descendante avec la sÃ©rie des versions 2.x, dans le but d\'Ã©liminer les faiblesses du langage. La ligne de conduite du projet Ã©tait de Â« rÃ©duire la redondance de Python par la suppression de mÃ©thodes obsolÃ¨tes Â». Python 3.0a1, la premiÃ¨re version alpha, avait Ã©tÃ© publiÃ©e le 31 aoÃ»t 200789, et il existe un PEP90 qui dÃ©taille les changements prÃ©vus, ainsi qu\'une page pour orienter les programmeurs dans leur choix de Python 2 ou 391.  Les calculatrices destinÃ©es aux lycÃ©ens (dont Casio, NumWorks, Texas Instruments...) et supportant Python92 fonctionnent en Python 3. Ces calculatrices peuvent Ã©changer des programmes avec des ordinateurs domestiques.  Philosophie Python 3 a Ã©tÃ© dÃ©veloppÃ© avec la mÃªme philosophie que dans ses versions antÃ©rieures, donc toute rÃ©fÃ©rence Ã  la philosophie de Python s\'appliquera aussi bien Ã  la version 3. Cependant, le langage avait fini par accumuler nombre de mÃ©thodes redondantes. En recherchant Ã  supprimer ce qui est redondant dans le langage et ses modules, Python 3 suit la ligne directrice de Python Â« Ne devrait subsister qu\'une seule mÃ©thode Ã  la fois optimale et naturelle pour chaque chose Â».  Python 3 reste un langage multi-paradigme. Les programmeurs auront encore le choix entre l\'orientation objet, la programmation structurÃ©e, la programmation fonctionnelle et d\'autres paradigmes ; Python 3 a pour but d\'Ãªtre utilisÃ© de maniÃ¨re plus naturelle que dans les versions 2.x, bien que son print nÃ©cessite l\'emploi de parenthÃ¨ses contrairement Ã  Python 2.  Planning et compatibilitÃ© Python 3.0a1, la premiÃ¨re version alpha de Python 3.0, fut publiÃ©e le 31 aoÃ»t 2007. Les versions 2.x et 3.x de Python seront publiÃ©es en parallÃ¨le pendant plusieurs cycles de dÃ©veloppement, pendant lesquels la sÃ©rie des 2.x subsistera principalement pour la compatibilitÃ©, en incluant quelques caractÃ©ristiques importÃ©es depuis Python 3.x. Le PEP 300093 contient plus d\'informations Ã  propos du processus de publication d\'une version.  Comme Perl 6, Python 3.0 rompt la compatibilitÃ© descendante (rÃ©tro-compatibilitÃ©). L\'utilisation de code Ã©crit pour les sÃ©ries 2.x n\'est pas garantie avec Python 3.0. Ce dernier apporte des changements fondamentaux, comme le passage complet Ã  l\'Unicode et pour cette raison une nÃ©cessaire distinction entre les chaÃ®nes de caractÃ¨re et les objets Â« bytes Â». Le typage dynamique associÃ© Ã  certaines mÃ©thodes sur les objets de type dictionnaire rend une transition parfaite de Python 2.x vers Python 3.0 trÃ¨s dÃ©licat. Un outil nommÃ© Â« 2to3 Â» traduit le plus gros des versions 2.x vers les versions 3.x et indique les zones de code demandant des finitions par des commentaires spÃ©ciaux et des mises en garde. Dans sa prÃ©-version, 2to3 semble rÃ©ussir franchement Ã  rÃ©aliser une traduction correcte94. Dans le cadre d\'une migration de Python 2.x vers Python 3.x, le PEP 3000 recommande de conserver le code original comme base des modifications et de le traduire pour la plateforme 3.x en utilisant 2to3.  Python 2.6 fournit un dÃ©but de compatibilitÃ© ascendante, aussi bien qu\'un mode Â« mise en garde Â» qui devrait faire prendre conscience des problÃ¨mes potentiels de transition pour le passage Ã  Python 395.  Python pour smartphones Il existe des versions de Python adaptÃ©es pour Android et iPhone en version 2.5 ou 2.6. Disponible en Jailbreak d\'iOS sur iOS grÃ¢ce Ã  \"setup tools\", et sur Android grÃ¢ce Ã  SL4A qui donne mÃªme une possibilitÃ© de faire des petites interfaces graphiques grÃ¢ce au module \"android\" et qui permet d\'envoyer des SMS, d\'allumer la camÃ©ra96, ou encore de faire vibrer le tÃ©lÃ©phone. Les quelques lignes suivantes montrent comment faire Ã§a :  droid = android.Android() # client liÃ© au serveur local lancÃ© par l\'application SL4A        # pour contrÃ´ler un tÃ©lÃ©phone distant Ã  l\'adresse 192.168.0.5, avec SL4A lancÃ© sur le port 9887        # il suffit de faire : android.Android(\'192.168.0.5\', 9887)  droid.vibrate(2.5) # fait vibrer le tÃ©lÃ©phone (local ou distant) pendant 2.5 secondes Un portage de Python sur les terminaux Blackberry est sorti en juin 2012, pour le systÃ¨me BlackBerry OS 1097. Une version allÃ©gÃ©e est sortie en septembre 2012, appelÃ©e Â« BlackBerry-Tart Â»98,99, en raison d\'un jeu de mots en anglais : Â« a \"tart\" is lighter-weight than a \"pie\" Â», en rÃ©fÃ©rence Ã  la traditionnelle Â« apple pie Â». Elle est basÃ©e sur Python 3.2.2.  Notes et rÃ©fÃ©rences Â« The History of Python: A Brief Timeline of Python Â», Blogger, 20 janvier 2009 (consultÃ© le 20 mars 2016) Â« https://docs.python.org/3.8/whatsnew/changelog.html Â», 24 fÃ©vrier 2020 (consultÃ© le 28 fÃ©vrier 2020) (en) Â« Python 3.7.7 is now available Â», 10 mars 2020 (consultÃ© le 10 mars 2020) (en) Â« Python 3.8.2 and 3.9.0a4 are now availabl Â», 25 fÃ©vrier 2020 (consultÃ© le 26 fÃ©vrier 2020) Prononciation en anglais amÃ©ricain retranscrite phonÃ©miquement selon la norme API. (en) Â« Python License Â» Download Python for Other Platforms (en) Â« il faut treize paragraphes pour expliquer un Hello, World! en C++, seulement deux en Python Â» FAQ Python 1.2 Why was Python created in the first place? Introduction to MacPython (en) Mark Lutz, Learning Python : Powerful Object-Oriented Programming, O\'Reilly Media, Inc., 6 octobre 2009, 1216 p. (ISBN 9781449379322, lire en ligne), Â« How Does Python Stack Up to Langage Â», p. 17 Introduction de la premiÃ¨re Ã©dition du livre Programming Python de Mark Lutz, Guido van Rossum 1996 Selon le fichier HISTORY mais la plus ancienne version accessible dans les archives du forum est la 0.9.1, Ã©galement disponible en tarball sur python.org The Grail Development Team Grail -- The Browser For The Rest Of Us 28.1 rexec - Restricted execution framework http://grail.sourceforge.net/info/diagram.gif Grail Home Page Computer Programming for Everybody (en) History of the software Andrew M. Kuchling, Python warts, Python Mailing List, 22 dÃ©cembre 1999 Python Warts Unifying types and classes in Python 2.2 PEP 8 - Style Guide for Python Code PEP 308 - Conditional Expressions The Python Standard Library - 31.6. keyword â€” Testing for Python keywords The Python Standard Library - 2. Built-in Functions (en) Â« Python 3.0 - Core Language Changes Â» (en) Â« PEP 3104 - Access to Names in Outer Scopes Â» Les objets bytes ont Ã©tÃ© introduits par le PEP 358, voir aussi le PEP 3137 Les comprÃ©hensions ont Ã©tÃ© introduites dans le PEP 202 en juillet 2000, et les comprÃ©hensions de dictionnaires et d\'ensembles dans le PEP 274 en octobre 2001 The Python Language Reference Â» 3. Data model Â» 3.3. Special method names PEP 380 - Syntax for Delegating to a Subgenerator traits - explicitly typed attributes for Python (en) Â« PEP 3107 -- Function Annotations Â», sur Python.org (consultÃ© le 4 mars 2020) (en) Collin Winter et Tony Lownds, Â« Fundamentals of Function Annotations Â», sur www.python.org, 6 dÃ©cembre 2006 (consultÃ© le 10 mars 2020) Â« 26.1. typing â€” Support for type hints â€” Python 3.6.10 documentation Â», sur docs.python.org (consultÃ© le 4 mars 2020) (en) Â« PEP 484 -- Type Hints Â», sur Python.org (consultÃ© le 4 mars 2020) http://www.pylint.org http://mypy-lang.org/ (en) Site officiel de PyInstaller http://svn.pythonmac.org/py2app/py2app/trunk/doc/index.html#abstract Dive into Python 3 - 1.5 Everything Is An Object Python Tutorial chapitre 9 Why must \'self\' be used explicitly in method definitions and calls? Python For AppleScripters Kim Barrett, Bob Cassels, Paul Haahr, David A. Moon, Keith Playford et P. Tucker Withington, Â« A monotonic superclass linearization for Dylan Â», ACM SIGPLAN Notices, vol. 31, no 10,â€Ž octobre 1996, p. 69-82 (DOI 10.1145/236337.236343, lire en ligne) The Python 2.3 Method Resolution Order Google Python Style Guide Pmw - Python megawidgets Quotes about Python Python Creator Guido van Rossum now working at Google, article sur ONLamp.com Python for ArcGIS Bulletin officiel spÃ©cial no 3 du 30 mai 2013, article sur http://www.education.gouv.fr/ Sujets du concours Mines-Ponts Sujets du concours Centrale-SupÃ©lec Python Implementations, dans le Python Wiki Shed Skin Unladen Swallow ModÃ¨le {{Lien web}} : paramÃ¨tre Â« titre Â» manquant.â€‚https://github.com/RustPython/RustPython Python Distributions, dans le Python Wiki ActivePython Python(x,y) Enthought Anaconda Intel Distribution for Python Pyzo WinPython (en) Whatâ€™s New in Python sur python.org Python 3.0 http://www.python.org/download/releases/3.0/ Python 3.1 http://www.python.org/download/releases/3.1/ Python 3.2 http://www.python.org/download/releases/3.2/ Python 3.3 http://www.python.org/download/releases/3.3.0/ http://www.python.org/dev/peps/pep-0380/ Â« Python 3.4 Â» Â« Whatâ€™s New In Python 3.4 â€” Python 3.4.5 documentation Â», sur docs.python.org (consultÃ© le 2 fÃ©vrier 2017) Â« Python 3.5 Â» Â« Whatâ€™s New In Python 3.5 â€” Python 3.5.3 documentation Â», sur docs.python.org (consultÃ© le 2 fÃ©vrier 2017) Python 3.6.0 PEP 515 - Underscores in Numeric Literals PEP 506 - Adding A Secrets Module To The Standard Library PEP 498 - Literal String Interpolation Â« Whatâ€™s New In Python 3.7 â€” Python 3.7.0a4 documentation Â», sur docs.python.org (consultÃ© le 31 janvier 2018) https://docs.python.org/3/library/contextvars.html https://docs.python.org/3/library/asyncio-task.html#awaitables https://www.python.org/dev/peps/pep-0553/ https://docs.python.org/3/library/time.html#time.time_ns Index of Python Enhancement Proposals Python 3.0a3 Release Python 3000 Should I use Python 2 or Python 3 for my development activity? Support par exemple exigÃ© en France en 2019 Plan de dÃ©veloppement PEP 3000 Sam Ruby, 2to3, 1er septembre 2007 PEP 361 http://code.google.com/p/android-scripting/ BlackBerry-Py Project blackberry-py sur Bitbucket BlackBerry-Tart Preview Voir aussi Sur les autres projets Wikimedia :  Python, sur Wikimedia CommonsPython, sur le WiktionnairePython, sur WikiversityPython, sur Wikibooks Liste de frameworks principaux BibliothÃ¨ques scientifiques : Calcul : NumPy, SciPy, Pandas, PyIMSL Studio, Sympy, SageMath SystÃ¨me expert : pyCLIPS, pyswip, pyDatalog, pyKE (Â« Python Knowledge Engine Â») Visualisation : pydot, Matplotlib, pyngl, MayaVi Exploration de donnÃ©es : Orange Simulation : simPy Chimie : PyMOL, MMTK, Chimera, PyQuante Biologie : Biopython Utilitaire : eGenix, ctype, Askbot Analyseur syntaxique : PyParsing, PLY (Â« Python Lex & Yacc Â»), NLTK (Â« Natural Language Toolkit Â»), SpaCy GÃ©nÃ©rateur de documentation : Sphinx Graphisme : PIL / Â« Pillow Â» Soya 3D, Vpython, pymedia, NodeBox Jeux : Pygame, Panda3D Framework web : Django, Karrigell, webware, Grok (en), TurboGears, Pylons (en), Flask, Bottle Serveur web, CMS : Plone, Zope, Google App Engine, CherryPy, MoinMoin, django CMS Cartographie : TileCache, FeatureServer, Cartoweb 4, Shapely, GeoDjango, PCL Protocoles : pyTango SÃ©rialisation : SimpleJSON TCP, UDP, SSL/TLS, multicast, Unix sockets, HTTP, NNTP, IMAP, SSH, IRC, FTP : Twisted Vecteur : GeoJSON, OWSLib, Quadtree, Rtree, Shapely, WorldMill, ZCO ORM : SQLObject, SQLAlchemy, Storm, Django ORM Driver SGBD : PyGresQL, Psycopg, MySQL-python Apprentissage : Keras Articles connexes Zen de Python : principes de design et d\'utilisation de Python Pip : gestionnaire de paquets des paquets Python. Cython : langage permettant d\'Ã©crire des modules compilables pour Python. IPython : terminal interactif. RUR-PLE : outil Ã©ducatif pour apprendre le Python de faÃ§on ludique en pilotant un robot virtuel. PyPI : dÃ©pÃ´t tiers officiel. v Â· m Python ImplÃ©mentation	CPython Â· IronPython Â· Jython Â· Psyco Â· PyPy Â· PyS60 Â· Shed Skin Â· Stackless Python Â· Unladen Swallow	Python logo and wordmark.svg Framework	Bottle Â· CherryPy Â· Django Â· Flask Â· Porcupine Â· Pylons Â· PyObjC (en) Â· Quixote Â· Qt (PyQt et PySide) Â· PyGTK Â· Scrapy Â· TurboGears Â· Web2py IDE	Anjuta Â· Aptana Â· Boa Constructor Â· IDLE Â· KDevelop Â· Komodo Â· Microsoft Visual Studio Â· PyCharm Â· PyDev Â· PyScripter Â· Spyder Autres	Python Software Foundation License Â· Pip Â· Liste de logiciels Python Â· Guido van Rossum Â· PyCon Â· PyPI Â· Python Software Foundation Â· Pipenv Â· Poetry v Â· m Langages de programmation Concurrents	 AdaErlangGoModula-2 DÃ©claratifs	 ClipsPrologMercury Fonctionnels	 Common LispErlangF#GallinaHaskellLispMLOCamlOpaSchemeStandard ML ImpÃ©ratifs	 AlgolAPLAssembleurBasicBCPLCCobolForthFortranJuliaLimboLuaModula-2NaturalNQCNXCOPLPascalPerlPL/IPowerShellRustTclWLangage OrientÃ©s objet	 ActionScriptAppleScriptC++C#CoffeeScriptDDelphiEiffelGroovyJavaJavaScriptLisaacLogoObjective-CPHPPythonRubyScalaSimulaSmalltalkSwiftKotlinVisual Basic Liste de langages de programmation v Â· m Langages serveurs CompilÃ©s	 CPascalFortranGoPython InterprÃ©tÃ©	 PerlPythonshellPHPColdFusionASP Les deux	 JavaScriptRuby  Portail de lâ€™informatique  Portail des logiciels libres  Portail de la programmation informatique CatÃ©gories : PythonLangage de programmationLangage impÃ©ratifLangage fonctionnelLangage orientÃ© objetLangage de scriptLogiciel libre sous licence PSFL Menu de navigation Non connectÃ©DiscussionContributionsCrÃ©er un compteSe connecterArticleDiscussionLireModifierModifier le codeVoir lâ€™historiqueRechercher Rechercher dans WikipÃ©dia Accueil Portails thÃ©matiques Article au hasard Contact Contribuer DÃ©buter sur WikipÃ©dia Aide CommunautÃ© Modifications rÃ©centes Faire un don Outils Pages liÃ©es Suivi des pages liÃ©es TÃ©lÃ©verser un fichier Pages spÃ©ciales Lien permanent Informations sur la page Ã‰lÃ©ment Wikidata Citer cette page Dans dâ€™autres projets Wikimedia Commons Wikilivres WikiversitÃ© Imprimer / exporter CrÃ©er un livre TÃ©lÃ©charger comme PDF Version imprimable Dans dâ€™autres langues Afrikaans Alemannisch AragonÃ©s Ø§Ù„Ø¹Ø±Ø¨ÙŠØ© à¦…à¦¸à¦®à§€à¦¯à¦¼à¦¾ Asturianu AzÉ™rbaycanca ØªÛ†Ø±Ú©Ø¬Ù‡ Ð‘ÐµÐ»Ð°Ñ€ÑƒÑÐºÐ°Ñ Ð‘ÑŠÐ»Ð³Ð°Ñ€ÑÐºÐ¸ à¦¬à¦¾à¦‚à¦²à¦¾ Bosanski á¨…á¨” á¨•á¨˜á¨á¨— CatalÃ  Cebuano Ú©ÙˆØ±Ø¯ÛŒ ÄŒeÅ¡tina Cymraeg Dansk Deutsch Î•Î»Î»Î·Î½Î¹ÎºÎ¬ English Esperanto EspaÃ±ol Eesti Euskara ÙØ§Ø±Ø³ÛŒ Suomi Na Vosa Vakaviti Galego àª—à«àªœàª°àª¾àª¤à«€ ×¢×‘×¨×™×ª à¤¹à¤¿à¤¨à¥à¤¦à¥€ Hrvatski Magyar Õ€Õ¡ÕµÕ¥Ö€Õ¥Õ¶ Interlingua Bahasa Indonesia Ãslenska Italiano æ—¥æœ¬èªž La .lojban. áƒ¥áƒáƒ áƒ—áƒ£áƒšáƒ˜ ÒšÐ°Ð·Ð°Ò›ÑˆÐ° áž—áž¶ážŸáž¶ážáŸ’áž˜áŸ‚ážš í•œêµ­ì–´ ÐšÑ‹Ñ€Ð³Ñ‹Ð·Ñ‡Ð° Latina Lumbaart LietuviÅ³ LatvieÅ¡u ÐœÐ°ÐºÐµÐ´Ð¾Ð½ÑÐºÐ¸ à´®à´²à´¯à´¾à´³à´‚ ÐœÐ¾Ð½Ð³Ð¾Ð» à¤®à¤°à¤¾à¤ à¥€ Bahasa Melayu á€™á€¼á€”á€ºá€™á€¬á€˜á€¬á€žá€¬ PlattdÃ¼Ã¼tsch à¤¨à¥‡à¤ªà¤¾à¤²à¥€ Nederlands Norsk nynorsk Norsk bokmÃ¥l à¬“à¬¡à¬¼à¬¿à¬† à¨ªà©°à¨œà¨¾à¨¬à©€ Polski Ù¾Ù†Ø¬Ø§Ø¨ÛŒ PortuguÃªs RomÃ¢nÄƒ Ð ÑƒÑÑÐºÐ¸Ð¹ Scots Srpskohrvatski / ÑÑ€Ð¿ÑÐºÐ¾Ñ…Ñ€Ð²Ð°Ñ‚ÑÐºÐ¸ á½á‚ƒá‚‡á€žá‚ƒá‚‡á€á‚†á€¸ à·ƒà·’à¶‚à·„à¶½ Simple English SlovenÄina SlovenÅ¡Äina Shqip Ð¡Ñ€Ð¿ÑÐºÐ¸ / srpski Svenska Kiswahili à®¤à®®à®¿à®´à¯ à°¤à±†à°²à±à°—à± Ð¢Ð¾Ò·Ð¸ÐºÓ£ à¹„à¸—à¸¢ Tagalog TÃ¼rkÃ§e Ð¢Ð°Ñ‚Ð°Ñ€Ñ‡Ð°/tatarÃ§a Ð£ÐºÑ€Ð°Ñ—Ð½ÑÑŒÐºÐ° Ø§Ø±Ø¯Ùˆ OÊ»zbekcha/ÑžÐ·Ð±ÐµÐºÑ‡Ð° Tiáº¿ng Viá»‡t Winaray å´è¯­ ä¸­æ–‡ BÃ¢n-lÃ¢m-gÃº ç²µèªž Modifier les liens La derniÃ¨re modification de cette page a Ã©tÃ© faite le 11 mars 2020 Ã  11:01. Droit d\'auteur : les textes sont disponibles sous licence Creative Commons attribution, partage dans les mÃªmes conditions ; dâ€™autres conditions peuvent sâ€™appliquer. Voyez les conditions dâ€™utilisation pour plus de dÃ©tails, ainsi que les crÃ©dits graphiques. En cas de rÃ©utilisation des textes de cette page, voyez comment citer les auteurs et mentionner la licence. WikipediaÂ® est une marque dÃ©posÃ©e de la Wikimedia Foundation, Inc., organisation de bienfaisance rÃ©gie par le paragraphe 501(c)(3) du code fiscal des Ã‰tats-Unis. Politique de confidentialitÃ©Ã€ propos de WikipÃ©diaAvertissementsContactDÃ©veloppeursStatistiquesDÃ©claration sur les tÃ©moins (cookies)Version mobileWikimedia FoundationPowered by MediaWiki', '2020-03-20 18:20:09');

-- --------------------------------------------------------

--
-- Structure de la table `commentresponse`
--

DROP TABLE IF EXISTS `commentresponse`;
CREATE TABLE IF NOT EXISTS `commentresponse` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `idResponse` int(11) NOT NULL,
  `user` int(11) NOT NULL,
  `comment` text NOT NULL,
  `date` datetime NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=MyISAM DEFAULT CHARSET=latin1;

-- --------------------------------------------------------

--
-- Structure de la table `grades`
--

DROP TABLE IF EXISTS `grades`;
CREATE TABLE IF NOT EXISTS `grades` (
  `id_grade` int(11) NOT NULL,
  `type` text NOT NULL,
  PRIMARY KEY (`id_grade`)
) ENGINE=MyISAM DEFAULT CHARSET=latin1;

-- --------------------------------------------------------

--
-- Structure de la table `idea`
--

DROP TABLE IF EXISTS `idea`;
CREATE TABLE IF NOT EXISTS `idea` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `user` int(11) NOT NULL,
  `title` text NOT NULL,
  `comment` text NOT NULL,
  `date` datetime NOT NULL,
  `yes` int(11) NOT NULL DEFAULT '0',
  `no` int(11) NOT NULL DEFAULT '0',
  `listVoted` text,
  PRIMARY KEY (`id`)
) ENGINE=MyISAM AUTO_INCREMENT=6 DEFAULT CHARSET=latin1;

-- --------------------------------------------------------

--
-- Structure de la table `membres`
--

DROP TABLE IF EXISTS `membres`;
CREATE TABLE IF NOT EXISTS `membres` (
  `id_membres` int(11) NOT NULL AUTO_INCREMENT,
  `prenom` text NOT NULL,
  `nom` text NOT NULL,
  `mail` text NOT NULL,
  `mot_de_passe` text NOT NULL,
  `id_grade` int(11) NOT NULL DEFAULT '0',
  `pdp` text,
  PRIMARY KEY (`id_membres`)
) ENGINE=MyISAM AUTO_INCREMENT=3 DEFAULT CHARSET=latin1;

--
-- Déchargement des données de la table `membres`
--

INSERT INTO `membres` (`id_membres`, `prenom`, `nom`, `mail`, `mot_de_passe`, `id_grade`, `pdp`) VALUES
(1, 'Isaac', 'Menard', 'isaac.menard@lp2i-poitiers.fr', '$2y$12$7P0gNIRmGt92xHzvac94VOb7aEZNRgo1UVbqGJa62sSv0uwCmvgMS', 0, '1.png'),
(2, 'Isaac', 'Menard', 'menardisaac@gmail.com', '$2y$12$BNGQA3W.r0Up0ou/lNc9..oD8A.gV7Lqj2qemoMEZMLzlxzm4Feni', 0, NULL);

-- --------------------------------------------------------

--
-- Structure de la table `menu`
--

DROP TABLE IF EXISTS `menu`;
CREATE TABLE IF NOT EXISTS `menu` (
  `id_menu` int(11) NOT NULL AUTO_INCREMENT,
  `date` date NOT NULL,
  `contenu` text NOT NULL,
  PRIMARY KEY (`id_menu`)
) ENGINE=MyISAM DEFAULT CHARSET=latin1;

-- --------------------------------------------------------

--
-- Structure de la table `messages`
--

DROP TABLE IF EXISTS `messages`;
CREATE TABLE IF NOT EXISTS `messages` (
  `id_message` int(11) NOT NULL,
  `contenue` text NOT NULL,
  `date_debut` datetime NOT NULL,
  `date_fin` datetime NOT NULL,
  PRIMARY KEY (`id_message`)
) ENGINE=MyISAM DEFAULT CHARSET=latin1;

-- --------------------------------------------------------

--
-- Structure de la table `probleme`
--

DROP TABLE IF EXISTS `probleme`;
CREATE TABLE IF NOT EXISTS `probleme` (
  `id_probleme` int(11) NOT NULL,
  `id_membre` int(11) NOT NULL,
  `date` datetime NOT NULL,
  `localisation` text NOT NULL,
  `description` text NOT NULL,
  PRIMARY KEY (`id_probleme`) USING BTREE
) ENGINE=MyISAM DEFAULT CHARSET=latin1;
COMMIT;

/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
